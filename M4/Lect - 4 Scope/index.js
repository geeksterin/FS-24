// Global Scope
// Functional Scope
// Block Scope

// console.log('----------------------------------------------------------------');
// let a;

// // function scope
// function greet(){
//     let b = 'Hello'; // Function Scope
//     console.log(a); // Global Scope
//     console.log(b); // Function Scope
// }


// // block scope
// {

// }

// const behavior is gonna be same with let so will learn it explicitly

// var vs let

// var has functional scope
// let has block scope
// const has block scope
// function hello() {
//     let firstName = 'John';
//     let abc = 56;
//     if (abc) {
//         let lastName = 'doe';
//     } else {

//     }
//     console.log(firstName);
//     console.log(lastName);
// }
// hello();
// console.log(firstName);



// var abc = 67;
// const def = 89;
// console.log(abc);

// if (56) {
//     console.log(abc);
// }

// function fun() {
//     console.log(abc);
// }
// fun();

// structural scope
// global
// functional
// block

// logical scope
// lexical scope => it defines the way how compiler is going to access the variable


// var xyz = 67;

// function outerFunction() {
//     // let xyz = 95;
//     if (90) {
//         if (true) {
//             // let xyz = 89;
//             console.log(xyz);
//         }
//     }
// }
// outerFunction();
// console.log(xyz);


// actual code
// console.log(num1);
// var num1;


// compiler will change the above code into this
// var num1;
// console.log(num1);

// Rule => whenever we create a var variable and not initialize it js will put undefined into it.

// let num2;
// console.log(num2);


// hoisting
// variable which is declared with var keyword is gonna be declared at **the top of their scope** and initialized with undefined

// My Code
// console.log(pqr);
// var pqr = 67;
// console.log(pqr);

// Compiler will change the above code into this
// var pqr=undefined;
// the above area is like variable declartion area
// console.log(pqr);
// pqr = 67;
// console.log(pqr);

// my code
// hoisting
// variable which is declared with var keyword is gonna be declared at **the top of their scope**
// function fun() {
//     console.log(abc);
//     if (78) {
//         var abc = "this is abc";
//     } else {

//     }
//     console.log(abc);
// }
// fun();
// comiler will change the above code into this
// function fun() {
//     var abc=undefined;
//     console.log(abc); // undefined
//     if (78) {
//         abc = "this is abc";
//     } else {

//     }
//     console.log(abc); // "this is abc"
// }

// console.log(abc);
// let abc;

// Refrence Error
// Type Error
// Syntax Error

// function fun(){

// }
// function fun2(){

// }

// let ghi = "how"
// ghi();

// console.log(num78)

// console.log(abc);
// let abc = 90;
// ReferenceError: Cannot access 'abc' before initialization

// let are also going to be hoisted but they are part of tempoal dead zone
// its means they are declared but not initialized

// console.log(ghi);
// ReferenceError: ghi is not defined

// our code
// console.log(abc);
// const abc = 90;

// compiler will change the above code into this
// let abc;
// console.log(abc);
// abc = 90;


// our code
// fun();
// function fun(){
//     console.log(abc);
//     var abc = "this is abc";
//     console.log(abc);
// }
// fun();

// the code generated by compiler
// function fun(){
//     console.log(abc);
//     var abc = "this is abc";
//     console.log(abc);
// }
// fun();
// fun();

// let has blcok
// var has functional
// const has block
// function has functional scope
// function outerFunction(){
//     innerFunction();
//     console.log("This is outer function");
//     function innerFunction(){
//         console.log("This is inner function");
//     }
// }

// outerFunction();

// innerFunction();

// 2 ways to declear a function
// function statement
// function greet(){

// }

// function expression => we will have annonymous function
// let sum = (num1, num2) => {
//     console.log(num1 + num2);
//     return num1 + num2;
// }
// sum(6, 7);
// sum = 90;
// sum(); // it will give error

// let subtraction = (num1, num2) => num1 - num2;
// console.log(subtraction(6, 7));

// function greet(){
//     console.log("Hello");
// }

// IIFE => Imidiatly invocked function express
// (function () {
//     console.log("This is IIFE");
// })();

// IIFE
// function statement vs function expression

// const is not allowing assignment inside variable
    // it means reference is immutable (means we cannot change)
        // but value which is held by that reference is mutable (means we change)

const abc = [1,2,3,4,5];

// abc = [7,8,9,0]; // error
abc.push(90); // [1,2,3,4,5,90]


const person = {
    firstName: 'Mir',
    age: 21
}
// console.log(person)
person.firstName = 'Amisha';
// console.log(person)

// array methods
const arr = [1,2,3,4,5,6];

arr.push(90);
arr.push(person); // to add variable at the end.
console.log(arr);

arr.unshift(-5); // to add variable at the starting.
console.log(arr);

arr.pop(); // to remove variable from the end
console.log(arr);

arr.shift() // to remove variable from the beginning
console.log(arr);

// HW
    // splice
    // slice
